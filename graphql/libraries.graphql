enum LibraryType {
    Music @enum(value: "music")
    Podcast @enum(value: "podcast")
    Audiobook @enum(value: "audiobook")
    Movie @enum(value: "movie")
    TvShow @enum(value: "tv_show")
}

type Library {
    id: ID!
    name: String!
    path: String!
    type: LibraryType!
    order: Int!
    last_scan: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Genre {
    "Unique primary key."
    id: ID!

    "The name of the genre."
    name: String!

    "The identifier used for paths"
    slug: String!

    "When the genre was created."
    created_at: DateTime!

    "When the genre was last updated."
    updated_at: DateTime!
}

type Artist {
    "Unique primary key."
    id: ID!

    "The name of the artist."
    name: String!

    "The identifier used for paths"
    slug: String!

    "The artist image"
    image: Image

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Album {
    "Unique primary key."
    id: ID!

    "The title of the album."
    title: String!

    "The identifier used for paths"
    slug: String!

    "The release year"
    year: Int

    "Url to the cover"
    coverUrl: String

    "The album cover"
    cover: Image

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    albumArtist: Artist @belongsTo
    songs: [Song!]! @hasMany
}

type StreamUrls {
    directStream: String
}

type Song {
    "Unique primary key."
    id: ID!

    "The title of the song."
    title: String!

    "The track number"
    track: Int

    "The disc number"
    disc: Int

    "The duration of the song in minutes and seconds"
    duration: String

    length: Float

    modified_time: Int

    lyrics: String

    path: String

    streamUrls: StreamUrls

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    artists: [Artist]! @belongsToMany

    album: Album @belongsTo

    genres: [Genre]! @morphToMany
}
