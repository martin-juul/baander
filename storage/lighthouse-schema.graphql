"Indicates what fields are available at the top level of a query operation."
type Query {
  "Find a single user by an identifying attribute."
  user(
    "Search by primary key."
    id: ID

    "Search by email address."
    email: String
  ): User

  me: User

  "List multiple users."
  users(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): UserPaginator!

  "List multiple accessTokens."
  accessTokens(
    "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    name: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): AccessTokenPaginator!
}

type Mutation {
  login(input: LoginInput): AccessToken!
  logout: LogoutResponse!
  register(input: RegisterInput): RegisterResponse!
  verifyEmail(input: VerifyEmailInput!): EmailVerificationResponse!
  resendEmailVerification(input: ResendEmailVerificationInput!): ResendEmailVerificationResponse!
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse!
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordResponse!
}

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

"Account of a person who utilizes this application."
type User {
  "Unique primary key."
  id: ID!

  "Non-unique name."
  name: String!

  is_admin: Boolean!

  "Unique email address."
  email: String!

  "When the email was verified."
  email_verified_at: DateTime

  "When the account was created."
  created_at: DateTime!

  "When the account was last updated."
  updated_at: DateTime!
}

"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!

  "The direction that is used for ordering."
  order: SortOrder!
}

type AccessToken {
  "Unique primary key."
  id: ID!

  "Non-unique name."
  name: String!

  abilities: [String]!
  last_used_at: DateTime

  "When the token was created."
  created_at: DateTime!

  "When the token was last updated."
  updated_at: DateTime!

  user: User
}

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  status: LogoutStatus!
  message: String!
}

enum LogoutStatus {
  "TOKEN_REVOKED"
  TOKEN_REVOKED
}

type RegisterResponse {
  token: String
  status: RegisterStatus!
}

enum RegisterStatus {
  "MUST_VERIFY_EMAIL"
  MUST_VERIFY_EMAIL

  "SUCCESS"
  SUCCESS
}

type EmailVerificationResponse {
  status: EmailVerificationStatus!
}

enum EmailVerificationStatus {
  "VERIFIED"
  VERIFIED
}

type ResendEmailVerificationResponse {
  status: ResendEmailVerificationStatus!
}

enum ResendEmailVerificationStatus {
  "EMAIL_SENT"
  EMAIL_SENT
}

input VerifyEmailInput {
  id: ID!
  hash: String!
  expires: Int
  signature: String
}

input ResendEmailVerificationInput {
  email: String!
  verification_url: VerificationUrlInput
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
  password_confirmation: String!
  verification_url: VerificationUrlInput
}

"""
The url used to verify the email address.
Use __ID__ and __HASH__ to inject values.

e.g; `https://my-front-end.com/verify-email?id=__ID__&hash=__HASH__`

If the API uses signed email verification urls
you must also use __EXPIRES__ and __SIGNATURE__

e.g; `https://my-front-end.com/verify-email?id=__ID__&hash=__HASH__&expires=__EXPIRES__&signature=__SIGNATURE__`
"""
input VerificationUrlInput {
  url: String!
}

input ForgotPasswordInput {
  email: String!
  reset_password_url: ResetPasswordUrlInput
}

"""
The url used to reset the password.
Use the `__EMAIL__` and `__TOKEN__` placeholders to inject the reset password email and token.

e.g; `https://my-front-end.com?reset-password?email=__EMAIL__&token=__TOKEN__`
"""
input ResetPasswordUrlInput {
  url: String!
}

type ForgotPasswordResponse {
  status: ForgotPasswordStatus!
  message: String
}

enum ForgotPasswordStatus {
  "EMAIL_SENT"
  EMAIL_SENT
}

input ResetPasswordInput {
  email: String!
  token: String!
  password: String!
  password_confirmation: String!
}

type ResetPasswordResponse {
  status: ResetPasswordStatus!
  message: String
}

enum ResetPasswordStatus {
  "PASSWORD_RESET"
  PASSWORD_RESET
}

input UpdatePasswordInput {
  current_password: String!
  password: String!
  password_confirmation: String!
}

type UpdatePasswordResponse {
  status: UpdatePasswordStatus!
}

enum UpdatePasswordStatus {
  "PASSWORD_UPDATED"
  PASSWORD_UPDATED
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Are there more pages after this one?"
  hasMorePages: Boolean!

  "Index of the last item in the current page."
  lastItem: Int

  "Index of the last available page."
  lastPage: Int!

  "Number of items per page."
  perPage: Int!

  "Number of total available items."
  total: Int!
}

"A paginated list of User items."
type UserPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of User items."
  data: [User!]!
}

"A paginated list of AccessToken items."
type AccessTokenPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of AccessToken items."
  data: [AccessToken!]!
}

"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC

  "Sort records in descending order."
  DESC
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG

  "Minimum."
  MIN

  "Maximum."
  MAX

  "Sum."
  SUM

  "Amount of items."
  COUNT
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY

  "Return both trashed and non-trashed results."
  WITH

  "Only return non-trashed results."
  WITHOUT
}
